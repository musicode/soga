{"version":3,"file":"soga.js","sources":["../src/createResponse.ts","../src/parseResponse.ts","../src/setRequestHeaders.ts","../src/fetch.ts","../src/AjaxUploader.ts"],"sourcesContent":["import * as type from './type'\n\nexport default function (\n  xhr: XMLHttpRequest,\n  keys: string[],\n  values: string[],\n  entries: string[][]\n) {\n  function response(): type.Response {\n    return {\n      // 200-299\n      ok: (xhr.status / 100 | 0) == 2,\n      statusText: xhr.statusText,\n      status: xhr.status,\n      url: xhr.responseURL,\n      headers: {\n        keys() {\n          return keys\n        },\n        values() {\n          return values\n        },\n        entries() {\n          return entries\n        }\n      },\n      text() {\n        return xhr.responseText\n      },\n      json() {\n        return JSON.parse(xhr.responseText)\n      },\n      blob() {\n        return new Blob([xhr.response])\n      },\n      clone: response,\n    }\n  }\n  return response\n}","import createResponse from './createResponse'\n\nexport default function (xhr: XMLHttpRequest) {\n\n  const keys: string[] = []\n  const values: string[] = []\n  const entries: string[][] = []\n\n  xhr\n    .getAllResponseHeaders()\n    .replace(\n      /^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm,\n      function (match: string, key: string, value: string) {\n        keys.push(key = key.toLowerCase())\n        values.push(value)\n        entries.push([key, value])\n        return match\n      }\n    )\n\n  return createResponse(xhr, keys, values, entries)\n\n}","export default function (xhr: XMLHttpRequest, headers?: HeadersInit) {\n  for (let key in headers) {\n    xhr.setRequestHeader(key, headers[key])\n  }\n}","import parseResponse from './parseResponse'\nimport setRequestHeaders from './setRequestHeaders'\n\nexport default function (url: string, options: RequestInit = {}) {\n  return new Promise(function (resolve, reject) {\n\n    const xhr = new XMLHttpRequest()\n\n    xhr.open(options.method || 'get', url, true)\n\n    xhr.onload = function () {\n      const response = parseResponse(xhr)\n      resolve(response())\n    }\n\n    xhr.onerror = reject\n    xhr.withCredentials = options.credentials === 'include'\n\n    setRequestHeaders(xhr, options.headers)\n\n    xhr.send(options.body || null)\n\n  })\n}","import * as type from './type'\nimport parseResponse from './parseResponse'\nimport setRequestHeaders from './setRequestHeaders'\n\nconst blobSlice = File.prototype['mozSlice'] || File.prototype['webkitSlice'] || File.prototype.slice\n\nexport default class AjaxUploader implements type.Uploader {\n\n  xhr: XMLHttpRequest\n\n  file: File\n  fileSize: number\n\n  hooks: type.UploadHooks\n\n  chunkInfo?: type.ChunkInfo\n\n  public static support() {\n    const xhr = new XMLHttpRequest()\n    return xhr && 'upload' in xhr && 'onprogress' in xhr.upload\n  }\n\n  constructor(file: File, hooks: type.UploadHooks) {\n\n    const instance = this\n\n    instance.file = file\n    instance.hooks = hooks\n\n    // 碰到过传了几个分片之后，file.size 变成 0 的情况\n    // 因此先存一下最初的 fileSize\n    instance.fileSize = file.size\n\n    const xhr = instance.xhr = new XMLHttpRequest()\n\n    xhr.upload.onloadstart = function () {\n      if (hooks.onUploadStart) {\n        hooks.onUploadStart()\n      }\n    }\n    xhr.upload.onloadend = function () {\n      if (hooks.onUploadEnd) {\n        hooks.onUploadEnd()\n      }\n    }\n    xhr.upload.onload = function () {\n\n      const { fileSize, chunkInfo } = instance\n\n      if (chunkInfo) {\n        if (chunkInfo.uploaded < fileSize) {\n          chunkInfo.uploaded += chunkInfo.uploading\n\n          if (hooks.onUploadChunkSuccess) {\n            hooks.onUploadChunkSuccess({\n              chunkIndex: chunkInfo.options.chunkIndex\n            })\n          }\n\n          // 还有分片没上传完则继续上传下一个\n          if (chunkInfo.uploaded < fileSize) {\n            chunkInfo.options.chunkIndex++\n            instance.uploadChunk(chunkInfo.options)\n            return\n          }\n        }\n      }\n\n      if (hooks.onUploadSuccess) {\n        const response = parseResponse(xhr)\n        hooks.onUploadSuccess(response())\n      }\n\n    }\n    xhr.upload.onerror = function () {\n      if (hooks.onUploadFailure) {\n        hooks.onUploadFailure()\n      }\n    }\n    xhr.upload.onabort = function () {\n      if (hooks.onUploadCancel) {\n        hooks.onUploadCancel()\n      }\n    }\n    xhr.upload.onprogress = function (event) {\n\n      const { fileSize, chunkInfo } = instance\n\n      let uploaded: number\n\n      if (chunkInfo) {\n        // 当前正在上传的分片 size\n        const chunkTotal = chunkInfo.uploading\n        // 不能比当前正在上传的 size 还大\n        const chunkUploaded = Math.min(chunkTotal, event.loaded)\n\n        if (hooks.onUploadChunkProgress) {\n          hooks.onUploadChunkProgress({\n            chunkIndex: chunkInfo.options.chunkIndex,\n            uploaded: chunkUploaded,\n            total: chunkTotal,\n            // 怕浏览器有 bug 导致 chunkTotal 为 0\n            percent: chunkTotal > 0 ? chunkUploaded / chunkTotal : 0\n          })\n        }\n\n        // 加上之前上传成功的分片 size\n        uploaded = chunkInfo.uploaded + chunkUploaded\n\n      }\n      else {\n        // 不能比文件 size 还大\n        uploaded = Math.min(fileSize, event.loaded)\n      }\n\n      if (hooks.onUploadProgress) {\n        hooks.onUploadProgress({\n          uploaded,\n          total: fileSize,\n          // 怕浏览器有 bug 导致 fileSize 为 0\n          percent: fileSize > 0 ? uploaded / fileSize : 0\n        })\n      }\n\n    }\n\n  }\n\n  /**\n   * 上传整个文件\n   */\n  upload(options: type.UploadOptions) {\n\n    const { xhr, file } = this\n\n    setRequestHeaders(xhr, options.headers)\n\n    const formData = new FormData()\n\n    for (let key in options.data) {\n      formData.append(key, options.data[key])\n    }\n\n    formData.append(options.fileName, file)\n\n    xhr.open('post', options.action, true)\n    xhr.send(formData)\n\n  }\n\n  /**\n   * 上传文件分片\n   */\n  uploadChunk(options: type.UploadChunkOptions) {\n\n    let { xhr, file, fileSize, chunkInfo } = this\n\n    if (!chunkInfo) {\n      chunkInfo = this.chunkInfo = {\n        uploaded: 0,\n        uploading: 0,\n        options,\n      }\n    }\n    else if (chunkInfo.options !== options) {\n      chunkInfo.options = options\n    }\n\n    // 默认从第一个分片开始上传，断点续传可以传入指定的分片\n    const chunkIndex = options.chunkIndex || 0\n    // 默认一个分片为 4M\n    const chunkSize = options.chunkSize || 4 * 1024 * 1024\n\n    const start = chunkSize * chunkIndex\n    const end = Math.min(fileSize, chunkSize * (chunkIndex + 1))\n\n    chunkInfo.uploading = end - start\n\n    setRequestHeaders(\n      xhr,\n      {\n        Range: `bytes ${start}-${end}/${fileSize}`\n      }\n    )\n\n    setRequestHeaders(\n      xhr,\n      options.headers\n    )\n\n    xhr.open('post', options.action, true)\n    xhr.send(blobSlice.call(file, start, end))\n\n  }\n\n}"],"names":["const","let"],"mappings":"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"}