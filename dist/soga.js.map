{"version":3,"file":"soga.js","sources":["../src/fetch.ts"],"sourcesContent":["export default function (url: string, options: RequestInit = {}) {\n  return new Promise(function (resolve, reject) {\n\n    const request = new XMLHttpRequest()\n    const keys: string[] = []\n    const entries: string[][] = []\n    const headers: Record<string, string> = {}\n\n    const response = function () {\n      return {\n        // 200-299\n        ok: (request.status / 100 | 0) == 2,\n        statusText: request.statusText,\n        status: request.status,\n        url: request.responseURL,\n        headers: {\n          keys() {\n            return keys\n          },\n          entries() {\n            return entries\n          },\n          get(key: string) {\n            return headers[key.toLowerCase()]\n          },\n          has(key: string) {\n            return key.toLowerCase() in headers\n          }\n        },\n        text() {\n          return Promise.resolve(request.responseText)\n        },\n        json() {\n          return Promise.resolve(JSON.parse(request.responseText))\n        },\n        blob() {\n          return Promise.resolve(new Blob([request.response]))\n        },\n        clone: response,\n      }\n    }\n\n    request.open(options.method || 'get', url, true)\n\n    request.onload = () => {\n      request\n      .getAllResponseHeaders()\n      .replace(\n        /^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm,\n        function (match: string, key: string, value: string) {\n          keys.push(key = key.toLowerCase())\n          entries.push([key, value])\n          headers[key] = headers[key] ? `${headers[key]},${value}` : value\n          return match\n        }\n      )\n      resolve(response())\n    }\n\n    request.onerror = reject\n\n    request.withCredentials = options.credentials === 'include'\n\n    for (let key in options.headers) {\n      request.setRequestHeader(key, options.headers[key])\n    }\n\n    request.send(options.body || null)\n\n  })\n}"],"names":["const","let"],"mappings":";;;;;;;;;;;;kBAAyB,GAAW,EAAE,OAAyB;0CAAF;;MAC3D,OAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM;UAE1CA,IAAM,OAAO,GAAG,IAAI,cAAc,EAAE,CAAA;UACpCA,IAAM,IAAI,GAAa,EAAE,CAAA;UACzBA,IAAM,OAAO,GAAe,EAAE,CAAA;UAC9BA,IAAM,OAAO,GAA2B,EAAE,CAAA;UAE1CA,IAAM,QAAQ,GAAG;cACf,OAAO;;kBAEL,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;kBACnC,UAAU,EAAE,OAAO,CAAC,UAAU;kBAC9B,MAAM,EAAE,OAAO,CAAC,MAAM;kBACtB,GAAG,EAAE,OAAO,CAAC,WAAW;kBACxB,OAAO,EAAE;sBACP,qBAAI;0BACF,OAAO,IAAI,CAAA;uBACZ;sBACD,2BAAO;0BACL,OAAO,OAAO,CAAA;uBACf;sBACD,iBAAG,CAAC,GAAW;0BACb,OAAO,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAA;uBAClC;sBACD,iBAAG,CAAC,GAAW;0BACb,OAAO,GAAG,CAAC,WAAW,EAAE,IAAI,OAAO,CAAA;uBACpC;mBACF;kBACD,mBAAI;sBACF,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAA;mBAC7C;kBACD,mBAAI;sBACF,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAA;mBACzD;kBACD,mBAAI;sBACF,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;mBACrD;kBACD,KAAK,EAAE,QAAQ;eAChB,CAAA;WACF,CAAA;UAED,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;UAEhD,OAAO,CAAC,MAAM,eAAM;cAClB,OAAO;mBACN,qBAAqB,EAAE;mBACvB,OAAO,CACN,8BAA8B,EAC9B,UAAU,KAAa,EAAE,GAAW,EAAE,KAAa;kBACjD,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC,CAAA;kBAClC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAA;kBAC1B,OAAO,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,KAAM,OAAO,CAAC,GAAG,WAAK,KAAK,IAAK,KAAK,CAAA;kBAChE,OAAO,KAAK,CAAA;eACb,CACF,CAAA;cACD,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAA;WACpB,CAAA;UAED,OAAO,CAAC,OAAO,GAAG,MAAM,CAAA;UAExB,OAAO,CAAC,eAAe,GAAG,OAAO,CAAC,WAAW,KAAK,SAAS,CAAA;UAE3D,KAAKC,IAAI,GAAG,IAAI,OAAO,CAAC,OAAO,EAAE;cAC/B,OAAO,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;WACpD;UAED,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,CAAA;OAEnC,CAAC,CAAA;GACH;;;;;;;;;;;;"}