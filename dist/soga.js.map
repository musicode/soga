{"version":3,"file":"soga.js","sources":["../src/function/createResponse.ts","../src/function/parseResponse.ts","../src/function/setRequestHeaders.ts","../src/fetch.ts","../src/AjaxUploader.ts"],"sourcesContent":["import * as type from '../type'\n\nexport default function (\n  xhr: XMLHttpRequest,\n  headers: Record<string, string>\n) {\n  function response(): type.Response {\n    return {\n      ok: xhr.status >= 200 && xhr.status < 300,\n      statusText: xhr.statusText || 'OK',\n      status: xhr.status || 200,\n      url: xhr.responseURL || headers['x-request-url'] || '',\n      headers: {\n        get(name: string) {\n          return headers[name.toLowerCase()]\n        },\n        has(name: string) {\n          return name.toLowerCase() in headers\n        }\n      },\n      body: xhr.response || xhr.responseText,\n      text() {\n        return xhr.responseText\n      },\n      json() {\n        return JSON.parse(xhr.responseText)\n      },\n      blob() {\n        return new Blob([xhr.response])\n      },\n      clone: response,\n    }\n  }\n  return response\n}","import createResponse from './createResponse'\n\nexport default function (xhr: XMLHttpRequest) {\n\n  const headers: Record<string, string> = {}\n\n  const rawHeaders = xhr.getAllResponseHeaders() || ''\n\n  rawHeaders.replace(\n    /^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm,\n    function (match: string, key: string, value: string) {\n      headers[key.toLowerCase()] = value\n      return match\n    }\n  )\n\n  return createResponse(xhr, headers)\n\n}","export default function (xhr: XMLHttpRequest, headers?: HeadersInit) {\n  for (let key in headers) {\n    xhr.setRequestHeader(key, headers[key])\n  }\n}","import parseResponse from './function/parseResponse'\nimport setRequestHeaders from './function/setRequestHeaders'\n\nexport default function (url: string, options: RequestInit = {}) {\n  return new Promise(function (resolve, reject) {\n\n    const xhr = new XMLHttpRequest()\n\n    xhr.open(options.method || 'get', url, true)\n\n    xhr.onload = function () {\n      const response = parseResponse(xhr)\n      resolve(response())\n    }\n\n    xhr.onerror = reject\n\n    /**\n     * The credentials indicates whether the user agent should send cookies\n     * from the other domain in the case of cross-origin requests.\n     *\n     * omit: Never send or receive cookies\n     *\n     * include: Always send user credentials (cookies, basic http auth, etc..), even for cross-origin calls\n     *\n     * same-origin: Send user credentials (cookies, basic http auth, etc..) if the URL is on the same origin as the calling script.\n     *              This is the default value.\n     */\n    if (options.credentials === 'include') {\n      xhr.withCredentials = true\n    }\n    else if (options.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    setRequestHeaders(xhr, options.headers)\n\n    xhr.send(options.body || null)\n\n  })\n}","import * as type from './type'\nimport parseResponse from './function/parseResponse'\nimport setRequestHeaders from './function/setRequestHeaders'\n\nconst blobSlice = File.prototype['mozSlice'] || File.prototype['webkitSlice'] || File.prototype.slice\n\nexport default class AjaxUploader implements type.Uploader {\n\n  xhr: XMLHttpRequest\n\n  file: File\n  fileSize: number\n\n  hooks: type.UploadHooks\n\n  chunkInfo?: type.ChunkInfo\n\n  public static support() {\n    const xhr = new XMLHttpRequest()\n    return xhr && 'upload' in xhr && 'onprogress' in xhr.upload\n  }\n\n  constructor(file: File, hooks: type.UploadHooks) {\n\n    const instance = this\n\n    instance.file = file\n    instance.hooks = hooks\n\n    // 碰到过传了几个分片之后，file.size 变成 0 的情况\n    // 因此先存一下最初的 fileSize\n    instance.fileSize = file.size || 0\n\n    const xhr = instance.xhr = new XMLHttpRequest()\n\n    xhr.onloadstart = function () {\n      if (hooks.onUploadStart) {\n        hooks.onUploadStart()\n      }\n    }\n    xhr.onloadend = function () {\n      if (hooks.onUploadEnd) {\n        hooks.onUploadEnd()\n      }\n    }\n    xhr.onload = function () {\n\n      const { fileSize, chunkInfo } = instance\n\n      if (chunkInfo) {\n        if (chunkInfo.uploaded < fileSize) {\n          chunkInfo.uploaded += chunkInfo.uploading\n\n          if (hooks.onUploadChunkSuccess) {\n            hooks.onUploadChunkSuccess({\n              chunkIndex: chunkInfo.options.chunkIndex\n            })\n          }\n\n          // 还有分片没上传完则继续上传下一个\n          if (chunkInfo.uploaded < fileSize) {\n            chunkInfo.options.chunkIndex++\n            instance.uploadChunk(chunkInfo.options)\n            return\n          }\n        }\n      }\n\n      if (hooks.onUploadSuccess) {\n        const response = parseResponse(xhr)\n        hooks.onUploadSuccess(response())\n      }\n\n    }\n    xhr.onerror = function () {\n      if (hooks.onUploadError) {\n        hooks.onUploadError()\n      }\n    }\n    xhr.onabort = function () {\n      if (hooks.onUploadCancel) {\n        hooks.onUploadCancel()\n      }\n    }\n    // 下载文件触发的是 xhr.onprogress\n    // 上传文件触发的是 xhr.upload.onprogress\n    xhr.upload.onprogress = function (event) {\n\n      const { fileSize, chunkInfo } = instance\n\n      let uploaded: number\n\n      if (chunkInfo) {\n        // 当前正在上传的分片 size\n        const chunkTotal = chunkInfo.uploading\n        // 不能比当前正在上传的 size 还大\n        const chunkUploaded = Math.min(chunkTotal, event.loaded)\n\n        if (hooks.onUploadChunkProgress) {\n          hooks.onUploadChunkProgress({\n            chunkIndex: chunkInfo.options.chunkIndex,\n            uploaded: chunkUploaded,\n            total: chunkTotal,\n            // 怕浏览器有 bug 导致 chunkTotal 为 0\n            percent: chunkTotal > 0 ? chunkUploaded / chunkTotal : 0\n          })\n        }\n\n        // 加上之前上传成功的分片 size\n        uploaded = chunkInfo.uploaded + chunkUploaded\n\n      }\n      else {\n        // 不能比文件 size 还大\n        uploaded = Math.min(fileSize, event.loaded)\n      }\n\n      if (hooks.onUploadProgress) {\n        hooks.onUploadProgress({\n          uploaded,\n          total: fileSize,\n          // 怕浏览器有 bug 导致 fileSize 为 0\n          percent: fileSize > 0 ? uploaded / fileSize : 0\n        })\n      }\n\n    }\n\n  }\n\n  /**\n   * 上传整个文件\n   */\n  upload(options: type.UploadOptions) {\n\n    const { xhr, file } = this\n\n    xhr.open('post', options.action, true)\n\n    const formData = new FormData()\n\n    for (let key in options.data) {\n      formData.append(key, options.data[key])\n    }\n\n    formData.append(options.fileName, file)\n\n    setRequestHeaders(xhr, options.headers)\n\n    xhr.send(formData)\n\n  }\n\n  /**\n   * 上传文件分片\n   */\n  uploadChunk(options: type.UploadChunkOptions) {\n\n    let { xhr, file, fileSize, chunkInfo } = this\n\n    if (!chunkInfo) {\n      chunkInfo = this.chunkInfo = {\n        uploaded: 0,\n        uploading: 0,\n        options,\n      }\n    }\n    else if (chunkInfo.options !== options) {\n      chunkInfo.options = options\n    }\n\n    // 默认从第一个分片开始上传，断点续传可以传入指定的分片\n    const chunkIndex = options.chunkIndex || 0\n\n    // 默认一个分片为 4M\n    const chunkSize = options.chunkSize || 4 * 1024 * 1024\n\n    const start = chunkSize * chunkIndex\n    const end = Math.min(fileSize, chunkSize * (chunkIndex + 1))\n\n    chunkInfo.uploading = end - start\n\n    xhr.open('post', options.action, true)\n\n    // xhr.setRequestHeader 必须在 open() 方法之后，send() 方法之前调用，否则会报错\n\n    // xhr.setRequestHeader 设置相同的请求头不会覆盖，而是追加，如 key: value1, value2\n    // 这里改成覆盖\n    const headers = {\n      Range: `bytes ${start}-${end}/${fileSize}`\n    }\n\n    for (let key in options.headers) {\n      headers[key] = options.headers[key]\n    }\n\n    setRequestHeaders(xhr, headers)\n\n    xhr.send(blobSlice.call(file, start, end))\n\n  }\n\n  abort() {\n    this.xhr.abort()\n  }\n\n}"],"names":["const","let"],"mappings":"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"}