{"version":3,"file":"soga.esm.min.js","sources":["../src/function/parseResponse.ts","../src/function/createResponse.ts","../src/function/setRequestHeaders.ts","../src/fetch.ts","../src/function/stringifyQuery.ts","../src/AjaxUploader.ts","../src/FlashUploader.ts"],"sourcesContent":["import createResponse from './createResponse'\n\nexport default function (xhr: XMLHttpRequest) {\n\n  const headers: Record<string, string> = {}\n\n  const rawHeaders = xhr.getAllResponseHeaders() || ''\n\n  rawHeaders.replace(\n    /^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm,\n    function (match: string, key: string, value: string) {\n      headers[key.toLowerCase()] = value\n      return match\n    }\n  )\n\n  return createResponse(xhr, headers)\n\n}","import {\n  Response,\n} from '../type'\n\nexport default function (\n  xhr: XMLHttpRequest,\n  headers: Record<string, string>\n) {\n  function response(): Response {\n    return {\n      ok: xhr.status >= 200 && xhr.status < 300,\n      statusText: xhr.statusText || 'OK',\n      status: xhr.status || 200,\n      url: xhr.responseURL || headers['x-request-url'] || '',\n      headers: {\n        get(name: string) {\n          return headers[name.toLowerCase()]\n        },\n        has(name: string) {\n          return name.toLowerCase() in headers\n        }\n      },\n      body: xhr.response || xhr.responseText,\n      text() {\n        return xhr.responseText\n      },\n      json() {\n        return JSON.parse(xhr.responseText)\n      },\n      blob() {\n        return new Blob([xhr.response])\n      },\n      clone: response,\n    }\n  }\n  return response\n}","export default function (xhr: XMLHttpRequest, headers?: HeadersInit) {\n  for (let key in headers) {\n    xhr.setRequestHeader(key, headers[key])\n  }\n}","import {\n  Response,\n  FetchOptions,\n} from './type'\n\nimport parseResponse from './function/parseResponse'\nimport setRequestHeaders from './function/setRequestHeaders'\nimport stringifyQuery from './function/stringifyQuery'\n\nexport default function fetch(url: string, options: FetchOptions = {}): Promise<Response> {\n  return new Promise(function (resolve, reject) {\n\n    const xhr = new XMLHttpRequest()\n\n    const method = options.method\n      ? options.method.toLowerCase()\n      : 'get'\n\n    let data = options.body || null\n\n    if (options.data) {\n      let query = stringifyQuery(options.data)\n      if (query) {\n        if (method === 'get') {\n          url += '?' + query\n        }\n        else if (!data) {\n          data = query\n        }\n      }\n    }\n\n    xhr.open(method, url, true)\n\n    xhr.onload = function () {\n      const response = parseResponse(xhr)\n      resolve(response())\n    }\n\n    xhr.onerror = reject\n\n    /**\n     * The credentials indicates whether the user agent should send cookies\n     * from the other domain in the case of cross-origin requests.\n     *\n     * omit: Never send or receive cookies\n     *\n     * include: Always send user credentials (cookies, basic http auth, etc..), even for cross-origin calls\n     *\n     * same-origin: Send user credentials (cookies, basic http auth, etc..) if the URL is on the same origin as the calling script.\n     *              This is the default value.\n     */\n    if (options.credentials === 'include') {\n      xhr.withCredentials = true\n    }\n    else if (options.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    setRequestHeaders(xhr, options.headers)\n\n    xhr.send(data)\n\n  })\n}\n","export default function (data: Record<string, any>) {\n  const list: string[] = []\n  for (let key in data) {\n    let value = data[key]\n    if (Array.isArray(value)) {\n      for (let i = 0, len = value.length; i < len; i++) {\n        list.push(key + '[]=' + encodeURIComponent(value[i]))\n      }\n    }\n    else if (typeof value === 'string') {\n      list.push(key + '=' + encodeURIComponent(value))\n    }\n    else if (typeof value !== 'undefined') {\n      list.push(key + '=' + value)\n    }\n  }\n  return list.join('&')\n}","import {\n  UploadOptions,\n  UploadChunkOptions,\n  UploadHooks,\n  ChunkInfo,\n} from './type'\n\nimport parseResponse from './function/parseResponse'\nimport setRequestHeaders from './function/setRequestHeaders'\n\nconst blobSlice = File.prototype.slice || File.prototype['webkitSlice'] || File.prototype['mozSlice']\n\nexport default class AjaxUploader {\n\n  xhr: XMLHttpRequest\n\n  file: File | Blob\n\n  fileSize: number\n\n  hooks: UploadHooks\n\n  chunkInfo?: ChunkInfo\n\n  public static support() {\n    const xhr = new XMLHttpRequest()\n    return 'upload' in xhr && 'onprogress' in xhr.upload\n  }\n\n  constructor(file: File | Blob, hooks: UploadHooks) {\n\n    const instance = this\n\n    instance.file = file\n    instance.hooks = hooks\n\n    // 碰到过传了几个分片之后，file.size 变成 0 的情况\n    // 因此先存一下最初的 fileSize\n    instance.fileSize = file.size || 0\n\n    const xhr = instance.xhr = new XMLHttpRequest()\n\n    xhr.onloadstart = function () {\n      if (hooks.onStart) {\n        hooks.onStart()\n      }\n    }\n    xhr.onloadend = function () {\n      if (hooks.onEnd) {\n        hooks.onEnd()\n      }\n    }\n    xhr.onload = function () {\n\n      const { fileSize, chunkInfo } = instance\n\n      if (chunkInfo) {\n        if (chunkInfo.uploaded < fileSize) {\n          chunkInfo.uploaded += chunkInfo.uploading\n\n          if (hooks.onChunkSuccess) {\n            hooks.onChunkSuccess({\n              chunkIndex: chunkInfo.options.chunkIndex\n            })\n          }\n\n          // 还有分片没上传完则继续上传下一个\n          if (chunkInfo.uploaded < fileSize) {\n            chunkInfo.options.chunkIndex++\n            instance.uploadChunk(chunkInfo.options)\n            return\n          }\n        }\n      }\n\n      if (hooks.onSuccess) {\n        const response = parseResponse(xhr)\n        hooks.onSuccess(response())\n      }\n\n    }\n    xhr.onerror = function () {\n      if (hooks.onError) {\n        hooks.onError()\n      }\n    }\n    xhr.onabort = function () {\n      if (hooks.onAbort) {\n        hooks.onAbort()\n      }\n    }\n    // 下载文件触发的是 xhr.onprogress\n    // 上传文件触发的是 xhr.upload.onprogress\n    xhr.upload.onprogress = function (event) {\n\n      const { fileSize, chunkInfo } = instance\n\n      let uploaded: number\n\n      if (chunkInfo) {\n        // 当前正在上传的分片 size\n        const chunkTotal = chunkInfo.uploading\n        // 不能比当前正在上传的 size 还大\n        const chunkUploaded = Math.min(chunkTotal, event.loaded)\n\n        if (hooks.onChunkProgress) {\n          hooks.onChunkProgress({\n            chunkIndex: chunkInfo.options.chunkIndex,\n            uploaded: chunkUploaded,\n            total: chunkTotal,\n            // 怕浏览器有 bug 导致 chunkTotal 为 0\n            percent: chunkTotal > 0 ? chunkUploaded / chunkTotal : 0\n          })\n        }\n\n        // 加上之前上传成功的分片 size\n        uploaded = chunkInfo.uploaded + chunkUploaded\n\n      }\n      else {\n        // 不能比文件 size 还大\n        uploaded = Math.min(fileSize, event.loaded)\n      }\n\n      if (hooks.onProgress) {\n        hooks.onProgress({\n          uploaded,\n          total: fileSize,\n          // 怕浏览器有 bug 导致 fileSize 为 0\n          percent: fileSize > 0 ? uploaded / fileSize : 0\n        })\n      }\n\n    }\n\n  }\n\n  /**\n   * 上传整个文件\n   */\n  upload(options: UploadOptions) {\n\n    const { xhr, file } = this\n\n    xhr.open('post', options.action, true)\n\n    if (options.credentials === 'include') {\n      xhr.withCredentials = true\n    }\n    else if (options.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    const formData = new FormData()\n\n    for (let key in options.data) {\n      formData.append(key, options.data[key])\n    }\n\n    formData.append(options.fileName, file)\n\n    setRequestHeaders(xhr, options.headers)\n\n    xhr.send(formData)\n\n  }\n\n  /**\n   * 上传文件分片\n   */\n  uploadChunk(options: UploadChunkOptions) {\n\n    let { xhr, file, fileSize, chunkInfo } = this\n\n    if (!chunkInfo) {\n      chunkInfo = this.chunkInfo = {\n        uploaded: 0,\n        uploading: 0,\n        options,\n      }\n    }\n    else if (chunkInfo.options !== options) {\n      chunkInfo.options = options\n    }\n\n    // 默认从第一个分片开始上传，断点续传可以传入指定的分片\n    const chunkIndex = options.chunkIndex || 0\n\n    // 默认一个分片为 4M\n    const chunkSize = options.chunkSize || (4 * 1024 * 1024)\n\n    const start = chunkSize * chunkIndex\n    const end = Math.min(fileSize, chunkSize * (chunkIndex + 1))\n\n    chunkInfo.uploading = end - start\n\n    xhr.open('post', options.action, true)\n\n    // xhr.setRequestHeader 必须在 open() 方法之后，send() 方法之前调用，否则会报错\n\n    // xhr.setRequestHeader 设置相同的请求头不会覆盖，而是追加，如 key: value1, value2\n    // 这里改成覆盖\n    const headers = {\n      Range: `bytes ${start}-${end}/${fileSize}`\n    }\n\n    for (let key in options.headers) {\n      headers[key] = options.headers[key]\n    }\n\n    setRequestHeaders(xhr, headers)\n\n    xhr.send(blobSlice.call(file, start, end))\n\n  }\n\n  /**\n   * 取消上传\n   */\n  abort() {\n    this.xhr.abort()\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    this.abort()\n  }\n\n}","import {\n  UploadOptions,\n  UploadProgress,\n} from './type'\n\ninterface IndexedFile {\n  index: number\n  status: number\n  name: string\n  type: string\n  size: number\n}\n\ninterface FlashDebug {\n  text: string\n}\n\ninterface FlashFile {\n  file: IndexedFile\n}\n\ninterface FlashSuccess {\n  file: IndexedFile\n  responseText: string\n}\n\ninterface FlashError {\n  file: IndexedFile,\n  code: number,\n  detail: Object | void\n}\n\ninterface FlashProgress {\n  file: IndexedFile\n  uploaded: number\n  total: number\n}\n\ninterface FlashUploaderOptions {\n  // swf 文件所在地址\n  swfUrl: string\n  // 可上传的文件格式，如 'jpg,png'\n  accept?: string\n  // 是否支持多文件上传\n  multiple?: boolean\n  // 是否开启调试模式\n  debug?: boolean\n  // 放置 <object> 标签的占位元素\n  el: Element\n}\n\ninterface FlashUploaderHooks {\n  onReady?: () => void\n  onFileChange?: () => void\n  onStart?: (file: IndexedFile) => void\n  onEnd?: (file: IndexedFile) => void\n  onError?: (file: IndexedFile, code: number, detail: Object | void) => void\n  onAbort?: (file: IndexedFile) => void\n  onProgress?: (file: IndexedFile, progress: UploadProgress) => void\n  onSuccess?: (file: IndexedFile, responseText: string) => void\n}\n\nexport default class FlashUploader {\n\n  swf: Element\n\n  movieName: string\n\n  hooks: FlashUploaderHooks\n\n  debug: boolean\n\n  public static instances = {}\n\n  /**\n   * 文件状态 - 等待上传\n   */\n  public static STATUS_WAITING = 0\n\n  /**\n   * 文件状态 - 正在上传\n   */\n  public static STATUS_UPLOADING = 1\n\n  /**\n   * 文件状态 - 上传成功\n   */\n  public static STATUS_UPLOAD_SUCCESS = 2\n\n  /**\n   * 文件状态 - 上传失败\n   */\n  public static STATUS_UPLOAD_ERROR = 3\n\n  /**\n   * 文件状态 - 上传中止\n   */\n  public static STATUS_UPLOAD_ABORT = 4\n\n  /**\n   * 错误码 - 上传出现沙箱安全错误\n   */\n  public static ERROR_SECURITY = 0\n\n  /**\n   * 错误码 - 上传 IO 错误\n   */\n  public static ERROR_IO = 1\n\n  constructor(options: FlashUploaderOptions, hooks: FlashUploaderHooks = {}) {\n\n    const movieName = createMovieName()\n\n    const swf = createSWF(\n      movieName,\n      options.swfUrl,\n      createFlashVars(movieName, options.accept || '', options.multiple || false)\n    )\n\n    const { el } = options\n    if (el.parentNode) {\n      el.parentNode.replaceChild(swf, el)\n    }\n    else {\n      throw new Error('el.parentNode is not found.')\n    }\n\n    this.swf = swf\n    this.movieName = movieName\n    this.hooks = hooks\n    this.debug = !!options.debug\n\n    FlashUploader.instances[movieName] = this\n\n  }\n\n  /**\n   * 获得要上传的文件\n   */\n  getFiles(): IndexedFile[] {\n    return this.swf['getFiles']()\n  }\n\n  /**\n   * 上传\n   */\n  upload(index: number, options: UploadOptions) {\n    this.swf['upload'](index, options.action, options.fileName, options.data, options.headers)\n  }\n\n  /**\n   * 取消上传\n   */\n  abort(index: number) {\n    this.swf['abort'](index)\n  }\n\n  /**\n   * 启用鼠标点击打开文件选择窗口\n   */\n  enable() {\n    this.swf['enable']()\n  }\n\n  /**\n   * 禁用鼠标点击打开文件选择窗口\n   */\n  disable() {\n    this.swf['disable']()\n  }\n\n  /**\n   * 销毁对象\n   */\n  destroy() {\n    const files = this.getFiles()\n    for (let i = 0, len = files.length; i < len; i++) {\n      this.abort(files[i].index)\n    }\n    this.swf['destroy']()\n    FlashUploader.instances[this.movieName] = null\n    // 清除 IE 引用\n    window[this.movieName] = null\n  }\n\n  onReady() {\n    // swf 文件初始化成功\n    const { onReady } = this.hooks\n    if (onReady) {\n      onReady()\n    }\n  }\n\n  onFileChange() {\n    // 用户选择文件\n    const { onFileChange } = this.hooks\n    if (onFileChange) {\n      onFileChange()\n    }\n  }\n\n  onStart(data: FlashFile) {\n    const { onStart } = this.hooks\n    if (onStart) {\n      onStart(data.file)\n    }\n  }\n\n  onEnd(data: FlashFile) {\n    const { onEnd } = this.hooks\n    if (onEnd) {\n      onEnd(data.file)\n    }\n  }\n\n  onError(data: FlashError) {\n    const { onError } = this.hooks\n    if (onError) {\n      onError(data.file, data.code, data.detail)\n    }\n  }\n\n  onAbort(data: FlashFile) {\n    const { onAbort } = this.hooks\n    if (onAbort) {\n      onAbort(data.file)\n    }\n  }\n\n  onProgress(data: FlashProgress) {\n    const { onProgress } = this.hooks\n    if (onProgress) {\n      const { file, uploaded, total } = data\n      onProgress(\n        file,\n        {\n          uploaded,\n          total,\n          percent: total > 0 ? uploaded / total : 0\n        }\n      )\n    }\n  }\n\n  onSuccess(data: FlashSuccess) {\n    const { onSuccess } = this.hooks\n    if (onSuccess) {\n      onSuccess(data.file, data.responseText)\n    }\n  }\n\n  onDebug(data: FlashDebug) {\n    if (this.debug) {\n      console.log(data.text)\n    }\n  }\n\n}\n\n/**\n * 项目名称 AS 会用 projectName.instances[movieName] 找出当前实例\n */\nconst projectName = 'Soga_Flash_Uploader'\n\n/**\n * 暴露给全局的对象，这样 AS 才能调到\n */\nwindow[projectName] = FlashUploader\n\n/**\n * guid 初始值\n */\nlet guid = 0\n\n/**\n * 创建新的唯一的影片剪辑名称\n */\nfunction createMovieName() {\n  return projectName + (guid++)\n}\n\n/**\n * 创建 swf 元素\n *\n * 无需兼容 IE67 用现有方法即可\n *\n * 如果想兼容 IE67，有两种方法：\n *\n * 1. 把 wmode 改成 opaque\n * 2. 用 swfobject 或别的库重写此方法\n *\n * 这里不兼容 IE67 是因为要判断浏览器实在太蛋疼了。。。\n */\nfunction createSWF(id: string, swfUrl: string, flashVars: string) {\n\n  const div = document.createElement('div')\n\n  // 不加 ID 在 IE 下没法运行\n  div.innerHTML = '<object id=\"' + id + '\" class=\"' + projectName.toLowerCase()\n    + '\" type=\"application/x-shockwave-flash\" data=\"' + swfUrl + '\">'\n    + '<param name=\"movie\" value=\"' + swfUrl + '\" />'\n    + '<param name=\"allowscriptaccess\" value=\"always\" />'\n    + '<param name=\"wmode\" value=\"transparent\" />'\n    + '<param name=\"flashvars\" value=\"' + flashVars + '\" />'\n    + '</object>'\n\n  return div.children[0]\n\n}\n\n/**\n * 拼装给 swf 用的参数\n */\nfunction createFlashVars(movieName: string, accept: string, multiple: boolean) {\n\n  const result = [\n    'projectName=' + projectName,\n    'movieName=' + movieName,\n    'accept=' + encodeURIComponent(accept),\n    'multiple=' + (multiple ? 'true' : 'false')\n  ]\n\n  return result.join('&amp;')\n\n}\n"],"names":["xhr","headers","getAllResponseHeaders","replace","match","key","value","toLowerCase","response","ok","status","statusText","url","responseURL","get","name","has","body","responseText","text","json","JSON","parse","blob","Blob","clone","createResponse","setRequestHeader","fetch","options","Promise","resolve","reject","XMLHttpRequest","method","data","query","list","Array","isArray","i","len","length","push","encodeURIComponent","join","stringifyQuery","open","onload","parseResponse","onerror","credentials","withCredentials","setRequestHeaders","send","blobSlice","File","prototype","slice","AjaxUploader","[object Object]","upload","file","hooks","instance","this","fileSize","size","onloadstart","onStart","onloadend","onEnd","chunkInfo","uploaded","uploading","onChunkSuccess","chunkIndex","uploadChunk","onSuccess","onError","onabort","onAbort","onprogress","event","chunkTotal","chunkUploaded","Math","min","loaded","onChunkProgress","total","percent","onProgress","action","formData","FormData","append","fileName","chunkSize","start","end","Range","call","abort","FlashUploader","movieName","projectName","guid","swf","id","swfUrl","flashVars","div","document","createElement","innerHTML","children","createSWF","accept","multiple","createFlashVars","el","parentNode","Error","replaceChild","debug","instances","index","files","getFiles","window","onReady","onFileChange","code","detail","console","log"],"mappings":"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"}