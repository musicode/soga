function e(e){const o={};return(e.getAllResponseHeaders()||"").replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,function(e,n,t){return o[n.toLowerCase()]=t,e}),function(e,o){return function n(){return{ok:e.status>=200&&e.status<300,statusText:e.statusText||"OK",status:e.status||200,url:e.responseURL||o["x-request-url"]||"",headers:{get:e=>o[e.toLowerCase()],has:e=>e.toLowerCase()in o},body:e.response||e.responseText,text:()=>e.responseText,json:()=>JSON.parse(e.responseText),blob:()=>new Blob([e.response]),clone:n}}}(e,o)}function o(e,o){for(let n in o)e.setRequestHeader(n,o[n])}function n(n,t={}){return new Promise(function(s,a){const i=new XMLHttpRequest;i.open(t.method||"get",n,!0),i.onload=function(){const o=e(i);s(o())},i.onerror=a,"include"===t.credentials?i.withCredentials=!0:"omit"===t.credentials&&(i.withCredentials=!1),o(i,t.headers),i.send(t.body||null)})}const t=File.prototype.slice||File.prototype.webkitSlice||File.prototype.mozSlice;class s{static support(){const e=new XMLHttpRequest;return"upload"in e&&"onprogress"in e.upload}constructor(o,n){const t=this;t.file=o,t.hooks=n,t.fileSize=o.size||0;const s=t.xhr=new XMLHttpRequest;s.onloadstart=function(){n.onStart&&n.onStart()},s.onloadend=function(){n.onEnd&&n.onEnd()},s.onload=function(){const{fileSize:o,chunkInfo:a}=t;if(a&&a.uploaded<o&&(a.uploaded+=a.uploading,n.onChunkSuccess&&n.onChunkSuccess({chunkIndex:a.options.chunkIndex}),a.uploaded<o))return a.options.chunkIndex++,void t.uploadChunk(a.options);if(n.onSuccess){const o=e(s);n.onSuccess(o())}},s.onerror=function(){n.onError&&n.onError()},s.onabort=function(){n.onAbort&&n.onAbort()},s.upload.onprogress=function(e){const{fileSize:o,chunkInfo:s}=t;let a;if(s){const o=s.uploading,t=Math.min(o,e.loaded);n.onChunkProgress&&n.onChunkProgress({chunkIndex:s.options.chunkIndex,uploaded:t,total:o,percent:o>0?t/o:0}),a=s.uploaded+t}else a=Math.min(o,e.loaded);n.onProgress&&n.onProgress({uploaded:a,total:o,percent:o>0?a/o:0})}}upload(e){const{xhr:n,file:t}=this;n.open("post",e.action,!0),"include"===e.credentials?n.withCredentials=!0:"omit"===e.credentials&&(n.withCredentials=!1);const s=new FormData;for(let o in e.data)s.append(o,e.data[o]);s.append(e.fileName,t),o(n,e.headers),n.send(s)}uploadChunk(e){let{xhr:n,file:s,fileSize:a,chunkInfo:i}=this;i?i.options!==e&&(i.options=e):i=this.chunkInfo={uploaded:0,uploading:0,options:e};const r=e.chunkIndex||0,l=e.chunkSize||4194304,c=l*r,d=Math.min(a,l*(r+1));i.uploading=d-c,n.open("post",e.action,!0);const u={Range:`bytes ${c}-${d}/${a}`};for(let o in e.headers)u[o]=e.headers[o];o(n,u),n.send(t.call(s,c,d))}abort(){this.xhr.abort()}destroy(){this.abort()}}class a{constructor(e,o={}){const n=i+r++,t=function(e,o,n){const t=document.createElement("div");return t.innerHTML='<object id="'+e+'" class="'+i.toLowerCase()+'" type="application/x-shockwave-flash" data="'+o+'"><param name="movie" value="'+o+'" /><param name="allowscriptaccess" value="always" /><param name="wmode" value="transparent" /><param name="flashvars" value="'+n+'" /></object>',t.children[0]}(n,e.swfUrl,function(e,o,n){return["projectName="+i,"movieName="+e,"accept="+encodeURIComponent(o),"multiple="+(n?"true":"false")].join("&amp;")}(n,e.accept||"",e.multiple||!1)),{el:s}=e;if(!s.parentNode)throw new Error("el.parentNode is not found.");s.parentNode.replaceChild(t,s),this.swf=t,this.movieName=n,this.hooks=o,this.debug=!!e.debug,a.instances[n]=this}getFiles(){return this.swf.getFiles()}upload(e,o){this.swf.upload(e,o.action,o.fileName,o.data,o.headers)}abort(e){this.swf.abort(e)}enable(){this.swf.enable()}disable(){this.swf.disable()}destroy(){const e=this.getFiles();for(let o=0,n=e.length;o<n;o++)this.abort(e[o].index);this.swf.destroy(),a.instances[this.movieName]=null,window[this.movieName]=null}onReady(){const{onReady:e}=this.hooks;e&&e()}onFileChange(){const{onFileChange:e}=this.hooks;e&&e()}onStart(e){const{onStart:o}=this.hooks;o&&o(e.file)}onEnd(e){const{onEnd:o}=this.hooks;o&&o(e.file)}onError(e){const{onError:o}=this.hooks;o&&o(e.file,e.code,e.detail)}onAbort(e){const{onAbort:o}=this.hooks;o&&o(e.file)}onProgress(e){const{onProgress:o}=this.hooks;if(o){const{file:n,uploaded:t,total:s}=e;o(n,{uploaded:t,total:s,percent:s>0?t/s:0})}}onSuccess(e){const{onSuccess:o}=this.hooks;o&&o(e.file,e.responseText)}onDebug(e){this.debug&&console.log(e.text)}}a.instances={},a.STATUS_WAITING=0,a.STATUS_UPLOADING=1,a.STATUS_UPLOAD_SUCCESS=2,a.STATUS_UPLOAD_ERROR=3,a.STATUS_UPLOAD_ABORT=4,a.ERROR_SECURITY=0,a.ERROR_IO=1;const i="Soga_Flash_Uploader";window[i]=a;let r=0;export{s as AjaxUploader,a as FlashUploader,n as fetch};
//# sourceMappingURL=soga.esm.min.js.map
