{"version":3,"file":"soga.min.js","sources":["../src/parseResponse.ts","../src/createResponse.ts","../src/AjaxUploader.ts","../src/fetch.ts"],"sourcesContent":["import createResponse from './createResponse'\n\nexport default function (xhr: XMLHttpRequest) {\n\n  const keys: string[] = []\n  const values: string[] = []\n  const entries: string[][] = []\n\n  xhr\n    .getAllResponseHeaders()\n    .replace(\n      /^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm,\n      function (match: string, key: string, value: string) {\n        keys.push(key = key.toLowerCase())\n        values.push(value)\n        entries.push([key, value])\n        return match\n      }\n    )\n\n  return createResponse(xhr, keys, values, entries)\n\n}","import * as type from './type'\n\nexport default function (\n  xhr: XMLHttpRequest,\n  keys: string[],\n  values: string[],\n  entries: string[][]\n) {\n  function response(): type.Response {\n    return {\n      // 200-299\n      ok: (xhr.status / 100 | 0) == 2,\n      statusText: xhr.statusText,\n      status: xhr.status,\n      url: xhr.responseURL,\n      headers: {\n        keys() {\n          return keys\n        },\n        values() {\n          return values\n        },\n        entries() {\n          return entries\n        }\n      },\n      text() {\n        return xhr.responseText\n      },\n      json() {\n        return JSON.parse(xhr.responseText)\n      },\n      blob() {\n        return new Blob([xhr.response])\n      },\n      clone: response,\n    }\n  }\n  return response\n}","import * as type from './type'\nimport parseResponse from './parseResponse'\n\nexport default class AjaxUploader implements type.Uploader {\n\n  xhr: XMLHttpRequest\n\n  file: File\n  hooks: type.UploadHooks\n\n  constructor(file: File, hooks: type.UploadHooks) {\n\n    this.file = file\n    this.hooks = hooks\n\n    const xhr = this.xhr = new XMLHttpRequest()\n\n    xhr.onloadstart = function () {\n      if (hooks.onUploadStart) {\n        hooks.onUploadStart()\n      }\n    }\n    xhr.onloadend = function () {\n      if (hooks.onUploadEnd) {\n        hooks.onUploadEnd()\n      }\n    }\n    xhr.onload = function () {\n      if (hooks.onUploadSuccess) {\n        const response = parseResponse(xhr)\n        hooks.onUploadSuccess(response())\n      }\n    }\n    xhr.onerror = function () {\n      if (hooks.onUploadFailure) {\n        hooks.onUploadFailure()\n      }\n    }\n    xhr.onabort = function () {\n      if (hooks.onUploadCancel) {\n        hooks.onUploadCancel()\n      }\n    }\n    xhr.onprogress = function (event) {\n      if (hooks.onUploadProgress) {\n        const total = file.size\n        const uploaded = Math.min(total, event.loaded)\n        const percent = total > 0 ? uploaded / total : 0\n        hooks.onUploadProgress({\n          uploaded,\n          total,\n          percent\n        })\n      }\n    }\n\n  }\n\n  upload(options: type.UploadOptions) {\n\n    const { xhr, file } = this\n\n    for (let key in options.header) {\n      xhr.setRequestHeader(name, options.header[key])\n    }\n\n    const formData = new FormData()\n\n    for (let key in options.data) {\n      formData.append(key, options.data[key])\n    }\n\n    formData.append(options.fileName, file)\n\n    xhr.open('post', options.action, true)\n\n    xhr.send(formData)\n\n  }\n\n}","import parseResponse from './parseResponse'\n\nexport default function (url: string, options: RequestInit = {}) {\n  return new Promise(function (resolve, reject) {\n\n    const xhr = new XMLHttpRequest()\n\n    xhr.open(options.method || 'get', url, true)\n\n    xhr.onload = function () {\n      const response = parseResponse(xhr)\n      resolve(response())\n    }\n\n    xhr.onerror = reject\n    xhr.withCredentials = options.credentials === 'include'\n\n    for (let key in options.headers) {\n      xhr.setRequestHeader(key, options.headers[key])\n    }\n\n    xhr.send(options.body || null)\n\n  })\n}"],"names":["xhr","const","keys","values","entries","getAllResponseHeaders","replace","match","key","value","push","toLowerCase","response","ok","status","statusText","url","responseURL","headers","text","responseText","json","JSON","parse","blob","Blob","clone","createResponse","AjaxUploader","file","hooks","this","XMLHttpRequest","onloadstart","onUploadStart","onloadend","onUploadEnd","onload","onUploadSuccess","parseResponse","onerror","onUploadFailure","onabort","onUploadCancel","onprogress","event","onUploadProgress","total","size","uploaded","Math","min","loaded","percent","upload","options","let","header","setRequestHeader","name","formData","FormData","data","append","fileName","open","action","send","Promise","resolve","reject","method","withCredentials","credentials","body"],"mappings":"4MAEyBA,GAEvBC,IAAMC,EAAiB,GACjBC,EAAmB,GACnBC,EAAsB,GAc5B,OAZAJ,EACGK,wBACAC,QACC,+BACA,SAAUC,EAAeC,EAAaC,GAIpC,OAHAP,EAAKQ,KAAKF,EAAMA,EAAIG,eACpBR,EAAOO,KAAKD,GACZL,EAAQM,KAAK,CAACF,EAAKC,IACZF,aCbbP,EACAE,EACAC,EACAC,GAgCA,OA9BA,SAASQ,IACP,MAAO,CAELC,GAA8B,IAAzBb,EAAIc,OAAS,IAAM,GACxBC,WAAYf,EAAIe,WAChBD,OAAQd,EAAIc,OACZE,IAAKhB,EAAIiB,YACTC,QAAS,CACPhB,gBACE,OAAOA,GAETC,kBACE,OAAOA,GAETC,mBACE,OAAOA,IAGXe,gBACE,OAAOnB,EAAIoB,cAEbC,gBACE,OAAOC,KAAKC,MAAMvB,EAAIoB,eAExBI,gBACE,OAAO,IAAIC,KAAK,CAACzB,EAAIY,YAEvBc,MAAOd,IDfJe,CAAe3B,EAAKE,EAAMC,EAAQC,GEjB3C,IAAqBwB,EAOnB,SAAYC,EAAYC,GAEtBC,KAAKF,KAAOA,EACZE,KAAKD,MAAQA,MAEP9B,EAAM+B,KAAK/B,IAAM,IAAIgC,eAE3BhC,EAAIiC,YAAc,WACZH,EAAMI,eACRJ,EAAMI,iBAGVlC,EAAImC,UAAY,WACVL,EAAMM,aACRN,EAAMM,eAGVpC,EAAIqC,OAAS,WACX,GAAIP,EAAMQ,gBAAiB,KACnB1B,EAAW2B,EAAcvC,GAC/B8B,EAAMQ,gBAAgB1B,OAG1BZ,EAAIwC,QAAU,WACRV,EAAMW,iBACRX,EAAMW,mBAGVzC,EAAI0C,QAAU,WACRZ,EAAMa,gBACRb,EAAMa,kBAGV3C,EAAI4C,WAAa,SAAUC,GACzB,GAAIf,EAAMgB,iBAAkB,CAC1B7C,IAAM8C,EAAQlB,EAAKmB,KACbC,EAAWC,KAAKC,IAAIJ,EAAOF,EAAMO,QACjCC,EAAUN,EAAQ,EAAIE,EAAWF,EAAQ,IACzCD,iBAAiB,UACrBG,QACAF,UACAM,mBAORC,gBAAOC,SAEiBxB,WAAAA,cAEjByB,IAAIhD,KAAO+C,EAAQE,OACtBzD,EAAI0D,iBAAiBC,KAAMJ,EAAQE,OAAOjD,IAG5CP,IAAM2D,EAAW,IAAIC,aAEhBL,IAAIhD,KAAO+C,EAAQO,KACtBF,EAASG,OAAOvD,EAAK+C,EAAQO,KAAKtD,MAG3BuD,OAAOR,EAAQS,SAAUnC,GAElC7B,EAAIiE,KAAK,OAAQV,EAAQW,QAAQ,GAEjClE,EAAImE,KAAKP,sCC1EY5C,EAAauC,GACpC,sBAD2D,IACpD,IAAIa,QAAQ,SAAUC,EAASC,GAEpCrE,IAAMD,EAAM,IAAIgC,eAYhB,IAAKwB,IAAIhD,KAVTR,EAAIiE,KAAKV,EAAQgB,QAAU,MAAOvD,GAAK,GAEvChB,EAAIqC,OAAS,WACXpC,IAAMW,EAAW2B,EAAcvC,GAC/BqE,EAAQzD,MAGVZ,EAAIwC,QAAU8B,EACdtE,EAAIwE,gBAA0C,YAAxBjB,EAAQkB,YAEdlB,EAAQrC,QACtBlB,EAAI0D,iBAAiBlD,EAAK+C,EAAQrC,QAAQV,IAG5CR,EAAImE,KAAKZ,EAAQmB,MAAQ"}