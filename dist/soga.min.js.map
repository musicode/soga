{"version":3,"file":"soga.min.js","sources":["../src/function/parseResponse.ts","../src/function/createResponse.ts","../src/function/setRequestHeaders.ts","../src/AjaxUploader.ts","../src/FlashUploader.ts","../src/fetch.ts"],"sourcesContent":["import createResponse from './createResponse'\n\nexport default function (xhr: XMLHttpRequest) {\n\n  const headers: Record<string, string> = {}\n\n  const rawHeaders = xhr.getAllResponseHeaders() || ''\n\n  rawHeaders.replace(\n    /^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm,\n    function (match: string, key: string, value: string) {\n      headers[key.toLowerCase()] = value\n      return match\n    }\n  )\n\n  return createResponse(xhr, headers)\n\n}","import {\n  Response,\n} from '../type'\n\nexport default function (\n  xhr: XMLHttpRequest,\n  headers: Record<string, string>\n) {\n  function response(): Response {\n    return {\n      ok: xhr.status >= 200 && xhr.status < 300,\n      statusText: xhr.statusText || 'OK',\n      status: xhr.status || 200,\n      url: xhr.responseURL || headers['x-request-url'] || '',\n      headers: {\n        get(name: string) {\n          return headers[name.toLowerCase()]\n        },\n        has(name: string) {\n          return name.toLowerCase() in headers\n        }\n      },\n      body: xhr.response || xhr.responseText,\n      text() {\n        return xhr.responseText\n      },\n      json() {\n        return JSON.parse(xhr.responseText)\n      },\n      blob() {\n        return new Blob([xhr.response])\n      },\n      clone: response,\n    }\n  }\n  return response\n}","export default function (xhr: XMLHttpRequest, headers?: HeadersInit) {\n  for (let key in headers) {\n    xhr.setRequestHeader(key, headers[key])\n  }\n}","import {\n  UploadOptions,\n  UploadChunkOptions,\n  UploadHooks,\n  ChunkInfo,\n} from './type'\n\nimport parseResponse from './function/parseResponse'\nimport setRequestHeaders from './function/setRequestHeaders'\n\nconst blobSlice = File.prototype.slice || File.prototype['webkitSlice'] || File.prototype['mozSlice']\n\nexport default class AjaxUploader {\n\n  xhr: XMLHttpRequest\n\n  file: File | Blob\n\n  fileSize: number\n\n  hooks: UploadHooks\n\n  chunkInfo?: ChunkInfo\n\n  public static support() {\n    const xhr = new XMLHttpRequest()\n    return 'upload' in xhr && 'onprogress' in xhr.upload\n  }\n\n  constructor(file: File | Blob, hooks: UploadHooks) {\n\n    const instance = this\n\n    instance.file = file\n    instance.hooks = hooks\n\n    // 碰到过传了几个分片之后，file.size 变成 0 的情况\n    // 因此先存一下最初的 fileSize\n    instance.fileSize = file.size || 0\n\n    const xhr = instance.xhr = new XMLHttpRequest()\n\n    xhr.onloadstart = function () {\n      if (hooks.onStart) {\n        hooks.onStart()\n      }\n    }\n    xhr.onloadend = function () {\n      if (hooks.onEnd) {\n        hooks.onEnd()\n      }\n    }\n    xhr.onload = function () {\n\n      const { fileSize, chunkInfo } = instance\n\n      if (chunkInfo) {\n        if (chunkInfo.uploaded < fileSize) {\n          chunkInfo.uploaded += chunkInfo.uploading\n\n          if (hooks.onChunkSuccess) {\n            hooks.onChunkSuccess({\n              chunkIndex: chunkInfo.options.chunkIndex\n            })\n          }\n\n          // 还有分片没上传完则继续上传下一个\n          if (chunkInfo.uploaded < fileSize) {\n            chunkInfo.options.chunkIndex++\n            instance.uploadChunk(chunkInfo.options)\n            return\n          }\n        }\n      }\n\n      if (hooks.onSuccess) {\n        const response = parseResponse(xhr)\n        hooks.onSuccess(response())\n      }\n\n    }\n    xhr.onerror = function () {\n      if (hooks.onError) {\n        hooks.onError()\n      }\n    }\n    xhr.onabort = function () {\n      if (hooks.onAbort) {\n        hooks.onAbort()\n      }\n    }\n    // 下载文件触发的是 xhr.onprogress\n    // 上传文件触发的是 xhr.upload.onprogress\n    xhr.upload.onprogress = function (event) {\n\n      const { fileSize, chunkInfo } = instance\n\n      let uploaded: number\n\n      if (chunkInfo) {\n        // 当前正在上传的分片 size\n        const chunkTotal = chunkInfo.uploading\n        // 不能比当前正在上传的 size 还大\n        const chunkUploaded = Math.min(chunkTotal, event.loaded)\n\n        if (hooks.onChunkProgress) {\n          hooks.onChunkProgress({\n            chunkIndex: chunkInfo.options.chunkIndex,\n            uploaded: chunkUploaded,\n            total: chunkTotal,\n            // 怕浏览器有 bug 导致 chunkTotal 为 0\n            percent: chunkTotal > 0 ? chunkUploaded / chunkTotal : 0\n          })\n        }\n\n        // 加上之前上传成功的分片 size\n        uploaded = chunkInfo.uploaded + chunkUploaded\n\n      }\n      else {\n        // 不能比文件 size 还大\n        uploaded = Math.min(fileSize, event.loaded)\n      }\n\n      if (hooks.onProgress) {\n        hooks.onProgress({\n          uploaded,\n          total: fileSize,\n          // 怕浏览器有 bug 导致 fileSize 为 0\n          percent: fileSize > 0 ? uploaded / fileSize : 0\n        })\n      }\n\n    }\n\n  }\n\n  /**\n   * 上传整个文件\n   */\n  upload(options: UploadOptions) {\n\n    const { xhr, file } = this\n\n    xhr.open('post', options.action, true)\n\n    const formData = new FormData()\n\n    for (let key in options.data) {\n      formData.append(key, options.data[key])\n    }\n\n    formData.append(options.fileName, file)\n\n    setRequestHeaders(xhr, options.headers)\n\n    xhr.send(formData)\n\n  }\n\n  /**\n   * 上传文件分片\n   */\n  uploadChunk(options: UploadChunkOptions) {\n\n    let { xhr, file, fileSize, chunkInfo } = this\n\n    if (!chunkInfo) {\n      chunkInfo = this.chunkInfo = {\n        uploaded: 0,\n        uploading: 0,\n        options,\n      }\n    }\n    else if (chunkInfo.options !== options) {\n      chunkInfo.options = options\n    }\n\n    // 默认从第一个分片开始上传，断点续传可以传入指定的分片\n    const chunkIndex = options.chunkIndex || 0\n\n    // 默认一个分片为 4M\n    const chunkSize = options.chunkSize || (4 * 1024 * 1024)\n\n    const start = chunkSize * chunkIndex\n    const end = Math.min(fileSize, chunkSize * (chunkIndex + 1))\n\n    chunkInfo.uploading = end - start\n\n    xhr.open('post', options.action, true)\n\n    // xhr.setRequestHeader 必须在 open() 方法之后，send() 方法之前调用，否则会报错\n\n    // xhr.setRequestHeader 设置相同的请求头不会覆盖，而是追加，如 key: value1, value2\n    // 这里改成覆盖\n    const headers = {\n      Range: `bytes ${start}-${end}/${fileSize}`\n    }\n\n    for (let key in options.headers) {\n      headers[key] = options.headers[key]\n    }\n\n    setRequestHeaders(xhr, headers)\n\n    xhr.send(blobSlice.call(file, start, end))\n\n  }\n\n  /**\n   * 取消上传\n   */\n  abort() {\n    this.xhr.abort()\n  }\n\n  /**\n   * 销毁\n   */\n  destroy() {\n    this.abort()\n  }\n\n}","import {\n  UploadOptions,\n  UploadProgress,\n} from './type'\n\ninterface IndexedFile {\n  index: number\n  status: number\n  name: string\n  type: string\n  size: number\n}\n\ninterface FlashDebug {\n  text: string\n}\n\ninterface FlashFile {\n  file: IndexedFile\n}\n\ninterface FlashSuccess {\n  file: IndexedFile\n  responseText: string\n}\n\ninterface FlashError {\n  file: IndexedFile,\n  code: number,\n  detail: Object | void\n}\n\ninterface FlashProgress {\n  file: IndexedFile\n  uploaded: number\n  total: number\n}\n\ninterface FlashUploaderOptions {\n  // swf 文件所在地址\n  swfUrl: string\n  // 可上传的文件格式，如 'jpg,png'\n  accept?: string\n  // 是否支持多文件上传\n  multiple?: boolean\n  // 是否开启调试模式\n  debug?: boolean\n  // 放置 <object> 标签的占位元素\n  el: Element\n}\n\ninterface FlashUploaderHooks {\n  onReady?: () => void\n  onFileChange?: () => void\n  onStart?: (file: IndexedFile) => void\n  onEnd?: (file: IndexedFile) => void\n  onError?: (file: IndexedFile, code: number, detail: Object | void) => void\n  onAbort?: (file: IndexedFile) => void\n  onProgress?: (file: IndexedFile, progress: UploadProgress) => void\n  onSuccess?: (file: IndexedFile, responseText: string) => void\n}\n\nexport default class FlashUploader {\n\n  swf: Element\n\n  movieName: string\n\n  hooks: FlashUploaderHooks\n\n  debug: boolean\n\n  public static instances = {}\n\n  /**\n   * 文件状态 - 等待上传\n   */\n  public static STATUS_WAITING = 0\n\n  /**\n   * 文件状态 - 正在上传\n   */\n  public static STATUS_UPLOADING = 1\n\n  /**\n   * 文件状态 - 上传成功\n   */\n  public static STATUS_UPLOAD_SUCCESS = 2\n\n  /**\n   * 文件状态 - 上传失败\n   */\n  public static STATUS_UPLOAD_ERROR = 3\n\n  /**\n   * 文件状态 - 上传中止\n   */\n  public static STATUS_UPLOAD_ABORT = 4\n\n  /**\n   * 错误码 - 上传出现沙箱安全错误\n   */\n  public static ERROR_SECURITY = 0\n\n  /**\n   * 错误码 - 上传 IO 错误\n   */\n  public static ERROR_IO = 1\n\n  constructor(options: FlashUploaderOptions, hooks: FlashUploaderHooks = {}) {\n\n    const movieName = createMovieName()\n\n    const swf = createSWF(\n      movieName,\n      options.swfUrl,\n      createFlashVars(movieName, options.accept || '', options.multiple || false)\n    )\n\n    const { el } = options\n    if (el.parentNode) {\n      el.parentNode.replaceChild(swf, el)\n    }\n    else {\n      throw new Error('el.parentNode is not found.')\n    }\n\n    this.swf = swf\n    this.movieName = movieName\n    this.hooks = hooks\n    this.debug = !!options.debug\n\n    FlashUploader.instances[movieName] = this\n\n  }\n\n  /**\n   * 获得要上传的文件\n   */\n  getFiles(): IndexedFile[] {\n    return this.swf['getFiles']()\n  }\n\n  /**\n   * 上传\n   */\n  upload(index: number, options: UploadOptions) {\n    this.swf['upload'](index, options.action, options.fileName, options.data, options.headers)\n  }\n\n  /**\n   * 取消上传\n   */\n  abort(index: number) {\n    this.swf['abort'](index)\n  }\n\n  /**\n   * 启用鼠标点击打开文件选择窗口\n   */\n  enable() {\n    this.swf['enable']()\n  }\n\n  /**\n   * 禁用鼠标点击打开文件选择窗口\n   */\n  disable() {\n    this.swf['disable']()\n  }\n\n  /**\n   * 销毁对象\n   */\n  destroy() {\n    const files = this.getFiles()\n    for (let i = 0, len = files.length; i < len; i++) {\n      this.abort(files[i].index)\n    }\n    this.swf['destroy']()\n    FlashUploader.instances[this.movieName] = null\n    // 清除 IE 引用\n    window[this.movieName] = null\n  }\n\n  onReady() {\n    // swf 文件初始化成功\n    const { onReady } = this.hooks\n    if (onReady) {\n      onReady()\n    }\n  }\n\n  onFileChange() {\n    // 用户选择文件\n    const { onFileChange } = this.hooks\n    if (onFileChange) {\n      onFileChange()\n    }\n  }\n\n  onStart(data: FlashFile) {\n    const { onStart } = this.hooks\n    if (onStart) {\n      onStart(data.file)\n    }\n  }\n\n  onEnd(data: FlashFile) {\n    const { onEnd } = this.hooks\n    if (onEnd) {\n      onEnd(data.file)\n    }\n  }\n\n  onError(data: FlashError) {\n    const { onError } = this.hooks\n    if (onError) {\n      onError(data.file, data.code, data.detail)\n    }\n  }\n\n  onAbort(data: FlashFile) {\n    const { onAbort } = this.hooks\n    if (onAbort) {\n      onAbort(data.file)\n    }\n  }\n\n  onProgress(data: FlashProgress) {\n    const { onProgress } = this.hooks\n    if (onProgress) {\n      const { file, uploaded, total } = data\n      onProgress(\n        file,\n        {\n          uploaded,\n          total,\n          percent: total > 0 ? uploaded / total : 0\n        }\n      )\n    }\n  }\n\n  onSuccess(data: FlashSuccess) {\n    const { onSuccess } = this.hooks\n    if (onSuccess) {\n      onSuccess(data.file, data.responseText)\n    }\n  }\n\n  onDebug(data: FlashDebug) {\n    if (this.debug) {\n      console.log(data.text)\n    }\n  }\n\n}\n\n/**\n * 项目名称 AS 会用 projectName.instances[movieName] 找出当前实例\n */\nconst projectName = 'Soga_Flash_Uploader'\n\n/**\n * 暴露给全局的对象，这样 AS 才能调到\n */\nwindow[projectName] = FlashUploader\n\n/**\n * guid 初始值\n */\nlet guid = 0\n\n/**\n * 创建新的唯一的影片剪辑名称\n */\nfunction createMovieName() {\n  return projectName + (guid++)\n}\n\n/**\n * 创建 swf 元素\n *\n * 无需兼容 IE67 用现有方法即可\n *\n * 如果想兼容 IE67，有两种方法：\n *\n * 1. 把 wmode 改成 opaque\n * 2. 用 swfobject 或别的库重写此方法\n *\n * 这里不兼容 IE67 是因为要判断浏览器实在太蛋疼了。。。\n */\nfunction createSWF(id: string, swfUrl: string, flashVars: string) {\n\n  const div = document.createElement('div')\n\n  // 不加 ID 在 IE 下没法运行\n  div.innerHTML = '<object id=\"' + id + '\" class=\"' + projectName.toLowerCase()\n    + '\" type=\"application/x-shockwave-flash\" data=\"' + swfUrl + '\">'\n    + '<param name=\"movie\" value=\"' + swfUrl + '\" />'\n    + '<param name=\"allowscriptaccess\" value=\"always\" />'\n    + '<param name=\"wmode\" value=\"transparent\" />'\n    + '<param name=\"flashvars\" value=\"' + flashVars + '\" />'\n    + '</object>'\n\n  return div.children[0]\n\n}\n\n/**\n * 拼装给 swf 用的参数\n */\nfunction createFlashVars(movieName: string, accept: string, multiple: boolean) {\n\n  const result = [\n    'projectName=' + projectName,\n    'movieName=' + movieName,\n    'accept=' + encodeURIComponent(accept),\n    'multiple=' + (multiple ? 'true' : 'false')\n  ]\n\n  return result.join('&amp;')\n\n}\n","import {\n  FetchOptions,\n} from './type'\n\nimport parseResponse from './function/parseResponse'\nimport setRequestHeaders from './function/setRequestHeaders'\n\nexport default function (url: string, options: FetchOptions = {}) {\n  return new Promise(function (resolve, reject) {\n\n    const xhr = new XMLHttpRequest()\n\n    xhr.open(options.method || 'get', url, true)\n\n    xhr.onload = function () {\n      const response = parseResponse(xhr)\n      resolve(response())\n    }\n\n    xhr.onerror = reject\n\n    /**\n     * The credentials indicates whether the user agent should send cookies\n     * from the other domain in the case of cross-origin requests.\n     *\n     * omit: Never send or receive cookies\n     *\n     * include: Always send user credentials (cookies, basic http auth, etc..), even for cross-origin calls\n     *\n     * same-origin: Send user credentials (cookies, basic http auth, etc..) if the URL is on the same origin as the calling script.\n     *              This is the default value.\n     */\n    if (options.credentials === 'include') {\n      xhr.withCredentials = true\n    }\n    else if (options.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    setRequestHeaders(xhr, options.headers)\n\n    xhr.send(options.body || null)\n\n  })\n}"],"names":["xhr","const","headers","getAllResponseHeaders","replace","match","key","value","toLowerCase","response","ok","status","statusText","url","responseURL","get","name","has","body","responseText","text","json","JSON","parse","blob","Blob","clone","createResponse","let","setRequestHeader","blobSlice","File","prototype","slice","AjaxUploader","file","hooks","instance","this","fileSize","size","XMLHttpRequest","onloadstart","onStart","onloadend","onEnd","onload","chunkInfo","uploaded","uploading","onChunkSuccess","chunkIndex","options","uploadChunk","onSuccess","parseResponse","onerror","onError","onabort","onAbort","upload","onprogress","event","chunkTotal","chunkUploaded","Math","min","loaded","onChunkProgress","onProgress","support","open","action","formData","FormData","data","append","fileName","send","chunkSize","start","end","setRequestHeaders","call","abort","destroy","FlashUploader","id","swfUrl","flashVars","div","movieName","projectName","guid","swf","accept","multiple","encodeURIComponent","join","createFlashVars","document","createElement","innerHTML","children","el","parentNode","Error","replaceChild","debug","instances","getFiles","index","enable","disable","files","i","len","length","onReady","onFileChange","code","detail","total","onDebug","log","window","Promise","resolve","reject","method","credentials","withCredentials"],"mappings":"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"}