{"version":3,"file":"soga.min.js","sources":["../src/parseResponse.ts","../src/createResponse.ts","../src/AjaxUploader.ts","../src/fetch.ts"],"sourcesContent":["import createResponse from './createResponse'\n\nexport default function (xhr: XMLHttpRequest) {\n\n  const keys: string[] = []\n  const values: string[] = []\n  const entries: string[][] = []\n\n  xhr\n    .getAllResponseHeaders()\n    .replace(\n      /^(.*?):[^\\S\\n]*([\\s\\S]*?)$/gm,\n      function (match: string, key: string, value: string) {\n        keys.push(key = key.toLowerCase())\n        values.push(value)\n        entries.push([key, value])\n        return match\n      }\n    )\n\n  return createResponse(xhr, keys, values, entries)\n\n}","import * as type from './type'\n\nexport default function (\n  xhr: XMLHttpRequest,\n  keys: string[],\n  values: string[],\n  entries: string[][]\n) {\n  function response(): type.Response {\n    return {\n      // 200-299\n      ok: (xhr.status / 100 | 0) == 2,\n      statusText: xhr.statusText,\n      status: xhr.status,\n      url: xhr.responseURL,\n      headers: {\n        keys() {\n          return keys\n        },\n        values() {\n          return values\n        },\n        entries() {\n          return entries\n        }\n      },\n      text() {\n        return Promise.resolve(xhr.responseText)\n      },\n      json() {\n        return Promise.resolve(JSON.parse(xhr.responseText))\n      },\n      blob() {\n        return Promise.resolve(new Blob([xhr.response]))\n      },\n      clone: response,\n    }\n  }\n  return response\n}","import * as type from './type'\nimport parseResponse from './parseResponse'\n\nexport default class AjaxUploader implements type.Uploader {\n\n  xhr: XMLHttpRequest\n\n  file: File\n  hooks: type.UploadHooks\n\n  constructor(file: File, hooks: type.UploadHooks) {\n\n    const instance = this\n\n    this.file = file\n    this.hooks = hooks\n\n    const xhr = this.xhr = new XMLHttpRequest()\n\n    xhr.onloadstart = function () {\n      if (hooks.onUploadStart) {\n        hooks.onUploadStart(instance)\n      }\n    }\n    xhr.onloadend = function () {\n      if (hooks.onUploadEnd) {\n        hooks.onUploadEnd(instance)\n      }\n    }\n    xhr.onload = function () {\n      if (hooks.onUploadSuccess) {\n        const response = parseResponse(xhr)\n        hooks.onUploadSuccess(instance, response())\n      }\n    }\n    xhr.onerror = function () {\n      if (hooks.onUploadFailure) {\n        hooks.onUploadFailure(instance)\n      }\n    }\n    xhr.onabort = function () {\n      if (hooks.onUploadCancel) {\n        hooks.onUploadCancel(instance)\n      }\n    }\n    xhr.onprogress = function (event) {\n      if (hooks.onUploadProgress) {\n        const total = file.size\n        const uploaded = Math.min(total, event.loaded)\n        const percent = total > 0 ? uploaded / total : 0\n        hooks.onUploadProgress(\n          instance,\n          {\n            uploaded,\n            total,\n            percent\n          }\n        )\n      }\n    }\n\n  }\n\n  upload(options: type.UploadOptions) {\n\n    const { xhr, file } = this\n\n    for (let key in options.header) {\n      xhr.setRequestHeader(name, options.header[key])\n    }\n\n    const formData = new FormData()\n\n    for (let key in options.data) {\n      formData.append(key, options.data[key])\n    }\n\n    formData.append(options.fileName, file)\n\n    xhr.open('post', options.action, true)\n\n    xhr.send(formData)\n\n  }\n\n}","import parseResponse from './parseResponse'\n\nexport default function (url: string, options: RequestInit = {}) {\n  return new Promise(function (resolve, reject) {\n\n    const xhr = new XMLHttpRequest()\n\n    xhr.open(options.method || 'get', url, true)\n\n    xhr.onload = function () {\n      const response = parseResponse(xhr)\n      resolve(response())\n    }\n\n    xhr.onerror = reject\n    xhr.withCredentials = options.credentials === 'include'\n\n    for (let key in options.headers) {\n      xhr.setRequestHeader(key, options.headers[key])\n    }\n\n    xhr.send(options.body || null)\n\n  })\n}"],"names":["xhr","const","keys","values","entries","getAllResponseHeaders","replace","match","key","value","push","toLowerCase","response","ok","status","statusText","url","responseURL","headers","text","Promise","resolve","responseText","json","JSON","parse","blob","Blob","clone","createResponse","AjaxUploader","file","hooks","instance","this","XMLHttpRequest","onloadstart","onUploadStart","onloadend","onUploadEnd","onload","onUploadSuccess","parseResponse","onerror","onUploadFailure","onabort","onUploadCancel","onprogress","event","onUploadProgress","total","size","uploaded","Math","min","loaded","percent","upload","options","let","header","setRequestHeader","name","formData","FormData","data","append","fileName","open","action","send","reject","method","withCredentials","credentials","body"],"mappings":"4MAEyBA,GAEvBC,IAAMC,EAAiB,GACjBC,EAAmB,GACnBC,EAAsB,GAc5B,OAZAJ,EACGK,wBACAC,QACC,+BACA,SAAUC,EAAeC,EAAaC,GAIpC,OAHAP,EAAKQ,KAAKF,EAAMA,EAAIG,eACpBR,EAAOO,KAAKD,GACZL,EAAQM,KAAK,CAACF,EAAKC,IACZF,aCbbP,EACAE,EACAC,EACAC,GAgCA,OA9BA,SAASQ,IACP,MAAO,CAELC,GAA8B,IAAzBb,EAAIc,OAAS,IAAM,GACxBC,WAAYf,EAAIe,WAChBD,OAAQd,EAAIc,OACZE,IAAKhB,EAAIiB,YACTC,QAAS,CACPhB,gBACE,OAAOA,GAETC,kBACE,OAAOA,GAETC,mBACE,OAAOA,IAGXe,gBACE,OAAOC,QAAQC,QAAQrB,EAAIsB,eAE7BC,gBACE,OAAOH,QAAQC,QAAQG,KAAKC,MAAMzB,EAAIsB,gBAExCI,gBACE,OAAON,QAAQC,QAAQ,IAAIM,KAAK,CAAC3B,EAAIY,aAEvCgB,MAAOhB,IDfJiB,CAAe7B,EAAKE,EAAMC,EAAQC,GEjB3C,IAAqB0B,EAOnB,SAAYC,EAAYC,GAEtB/B,IAAMgC,EAAWC,KAEjBA,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,MAEPhC,EAAMkC,KAAKlC,IAAM,IAAImC,eAE3BnC,EAAIoC,YAAc,WACZJ,EAAMK,eACRL,EAAMK,cAAcJ,IAGxBjC,EAAIsC,UAAY,WACVN,EAAMO,aACRP,EAAMO,YAAYN,IAGtBjC,EAAIwC,OAAS,WACX,GAAIR,EAAMS,gBAAiB,KACnB7B,EAAW8B,EAAc1C,KACzByC,gBAAgBR,EAAUrB,OAGpCZ,EAAI2C,QAAU,WACRX,EAAMY,iBACRZ,EAAMY,gBAAgBX,IAG1BjC,EAAI6C,QAAU,WACRb,EAAMc,gBACRd,EAAMc,eAAeb,IAGzBjC,EAAI+C,WAAa,SAAUC,GACzB,GAAIhB,EAAMiB,iBAAkB,CAC1BhD,IAAMiD,EAAQnB,EAAKoB,KACbC,EAAWC,KAAKC,IAAIJ,EAAOF,EAAMO,QACjCC,EAAUN,EAAQ,EAAIE,EAAWF,EAAQ,EAC/ClB,EAAMiB,iBACJhB,EACA,UACEmB,QACAF,UACAM,mBAQVC,gBAAOC,SAEiBxB,WAAAA,cAEjByB,IAAInD,KAAOkD,EAAQE,OACtB5D,EAAI6D,iBAAiBC,KAAMJ,EAAQE,OAAOpD,IAG5CP,IAAM8D,EAAW,IAAIC,aAEhBL,IAAInD,KAAOkD,EAAQO,KACtBF,EAASG,OAAO1D,EAAKkD,EAAQO,KAAKzD,MAG3B0D,OAAOR,EAAQS,SAAUpC,GAElC/B,EAAIoE,KAAK,OAAQV,EAAQW,QAAQ,GAEjCrE,EAAIsE,KAAKP,sCC/EY/C,EAAa0C,GACpC,sBAD2D,IACpD,IAAItC,QAAQ,SAAUC,EAASkD,GAEpCtE,IAAMD,EAAM,IAAImC,eAYhB,IAAKwB,IAAInD,KAVTR,EAAIoE,KAAKV,EAAQc,QAAU,MAAOxD,GAAK,GAEvChB,EAAIwC,OAAS,WACXvC,IAAMW,EAAW8B,EAAc1C,GAC/BqB,EAAQT,MAGVZ,EAAI2C,QAAU4B,EACdvE,EAAIyE,gBAA0C,YAAxBf,EAAQgB,YAEdhB,EAAQxC,QACtBlB,EAAI6D,iBAAiBrD,EAAKkD,EAAQxC,QAAQV,IAG5CR,EAAIsE,KAAKZ,EAAQiB,MAAQ"}